# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ARMM
                                 A QGIS plugin
 ARMM
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-06-29
        git sha              : $Format:%H$
        copyright            : (C) 2023 by GPN_GEO
        email                : nastyashevchenkomail@mail.ru
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtWidgets import QComboBox
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import (
    QgsVectorLayer,
    QgsDataSourceUri,
    QgsFeature,
    QgsProject
)

# Initialize Qt resources from file resources.py
from .modules.rig import Rig
from .modules.wellpad import Wellpad
from .modules.lic_area import LicArea
from .resources import *
# Import the code for the dialog
from .ARMM_dialog import Ui_MainWindow
import os.path
import psycopg2


class ARMM:
    """QGIS Plugin Implementation."""

    # def on_combo_box_changed(self):
    #     # Обработка изменения выбора в QComboBox
    #     return self.dlg.comboBox.currentText()

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ARMM_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&ARMM')
        self.active_wellpad = False

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.lic_areas = None
        self.wellpads = None
        self.rigs = None
        self.list_wp = None
        self.list_rig = None

    # noinspection PyMethodMayBeStatic

    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ARMM', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/ARMM/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'ARMM'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&ARMM'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = Ui_MainWindow()
            # print(self.dlg.comboBox.currentTextChanged.connect(self.text_changed))

            self.dlg.pushButton.clicked.connect(self.choose_lic_area)
            self.dlg.pushButton_2.clicked.connect(self.choose_wellpad)

        # show the dialog
        # print(self.dlg.comboBox.currentTextChanged.connect(self.text_changed))

        self.dlg.show()

        # Run the dialog event loop
        # result = self.dlg.exec_()
        # See if OK was pressed
        # if result:
        # Do something useful here - delete the line containing pass and
        # substitute with your code.
        # pass

        # uri = QgsDataSourceUri()
        # uri.setConnection("localhost", "5432", "arm_db", "postgres", "postgres")
        # uri.setDataSource("public", "lic_area", "name", "primary_key_field")
        # vlayer = QgsVectorLayer(uri.uri(False), "lic_area", "postgres")
        # print(vlayer.selectAll())
        # Создаем векторный слой на основе URI и добавляем его в проект
        # vlayer = QgsVectorLayer(uri.uri(), "lic_area", "postgres")
        # QgsProject.instance().addMapLayer(vlayer

        # features = vlayer.getFeatures()
        # for feature in features:
        #     # Доступ к геометрии и атрибутам каждого объекта
        #     # geometry = feature.geometry()
        #     attributes = feature.attributes()
        #     print(attributes)

        # Установка параметров подключения к базе данных
        conn = psycopg2.connect(
            host="localhost",
            port="5432",
            database="arm_db",
            user="postgres",
            password="postgres"
        )
        """ lic_area"""
        # Создание курсора для выполнения SQL-запросов
        cur = conn.cursor()

        # Выполнение SQL-запроса для получения всех объектов из таблицы
        cur.execute("SELECT * FROM lic_area")

        # Получение всех строк lic_area (объектов) из результата запроса
        rows = cur.fetchall()
        self.lic_areas = LicArea(rows)

        """ wellpad"""
        cur.execute("SELECT * FROM wellpad")
        rows = cur.fetchall()
        self.wellpads = Wellpad(rows)

        """ rig"""
        cur.execute("SELECT * FROM rig")
        rows = cur.fetchall()
        self.rigs = Rig(rows)

        # Закрытие курсора и соединения с базой данных
        cur.close()
        conn.close()
        self.dlg.comboBox.clear()

        for name in self.lic_areas.get_dict_lic_area():
            self.dlg.comboBox.addItem(name)

    def choose_lic_area(self):
        """Метод, который заполняет площадки для соответстующего ЛУ"""
        self.dlg.comboBox_2.clear()
        self.dlg.comboBox_3.clear()
        # считываем текущее значение ЛУ
        cur_lic = self.dlg.comboBox.currentText()

        for key, value in self.wellpads.get_dict_wellpads().items():
            # проверяем, что luid у площадки и id у ЛУ совпадают
            if value[1] == self.lic_areas.get_dict_lic_area()[cur_lic]:
                # заносим в список все площадки, принадлежащие одному ЛУ
                self.list_wp = self.wellpads.create_list_wellpads_for_one_lic_area(value[1])
                for wp in self.list_wp:
                    self.dlg.comboBox_2.addItem(wp)
                # очищаем список с площадками, чтобы для другого ЛУ не отображались прошлые площадки
                self.list_wp.clear()
                # прерываем цикл, чтобы площадки не множились
                break
        return self.dlg.comboBox.currentText()

    def choose_wellpad(self):
        """Метод, который заполняет станки для соответствующей плошадки"""
        self.dlg.comboBox_3.clear()
        t = self.dlg.comboBox_2.currentText()
        for key, value in self.rigs.get_dict_rigs().items():
            if value[0] == self.wellpads.get_dict_wellpads()[t][0]:
                self.list_rig = self.rigs.create_list_rigs_for_one_wellpad(value[0])
                for rig in self.list_rig:
                    self.dlg.comboBox_3.addItem(rig)
                # очищаем список с площадками, чтобы для другого ЛУ не отображались прошлые площадки
                self.list_rig.clear()
                # прерываем цикл, чтобы площадки не множились
                break
        return self.dlg.comboBox_2.currentText()
